<type access-modifier="private" name="Explorer_ItemTable" display-name="Explorer_ItemTable" uuid="d1d2812d-53dc-43ce-a92a-c3167d8e9e0f" base-type="Rectangle" base-type-id="15726dc3-881e-4d8d-b0fa-a8f8237f08ca" ver="5">
	<designed target="X" value="0" ver="5"/>
	<designed target="Y" value="0" ver="5"/>
	<designed target="ZValue" value="0" ver="5"/>
	<designed target="Rotation" value="0" ver="5"/>
	<designed target="Scale" value="1" ver="5"/>
	<designed target="Visible" value="true" ver="5"/>
	<designed target="Opacity" value="1" ver="5"/>
	<designed target="Enabled" value="true" ver="5"/>
	<designed target="Tooltip" value="" ver="5"/>
	<designed target="Width" value="600" ver="5"/>
	<designed target="Height" value="500" ver="5"/>
	<designed target="RoundingRadius" value="0" ver="5"/>
	<designed target="PenColor" value="4278190080" ver="5"/>
	<designed target="PenStyle" value="0" ver="5"/>
	<designed target="PenWidth" value="1" ver="5"/>
	<designed target="BrushColor" value="4278190080" ver="5"/>
	<designed target="BrushStyle" value="0" ver="5"/>
	<object access-modifier="private" name="Layout" display-name="Layout" uuid="c33b4095-56cd-4045-82e7-7d31ca0fae5b" base-type="LinearLayout" base-type-id="800edd71-7303-408c-890b-8346e98f5718" ver="5">
		<designed target="Orientation" value="2" ver="5"/>
		<designed target="Gap" value="0" ver="5"/>
	</object>
	<object access-modifier="private" name="Debug" display-name="Debug" uuid="a98dbe90-d89d-4350-8909-fddbf7827a72" base-type="DebugTool" base-type-id="43946044-139a-43f4-a7b8-19a6074ffc56" ver="5"/>
	<object access-modifier="private" name="Initializer" display-name="Initializer" uuid="66f3b0f2-c7d4-48e9-8ab4-02b90a2fe7c7" base-type="Initializer" base-type-id="6db89679-9299-4993-ad1a-0d086cd1c7d2" ver="5">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Initialized">
			<body kind="om">
				<![CDATA[View.Init();]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="View" display-name="View" uuid="4865b939-04ae-4103-bac3-ee7c9b2c548b" base-type="Table" base-type-id="c65ff4dc-f22b-47d3-9333-72c4e4e5f662" ver="5">
		<designed target="X" value="0" ver="5"/>
		<designed target="Y" value="0" ver="5"/>
		<designed target="Rotation" value="0" ver="5"/>
		<designed target="Scale" value="1" ver="5"/>
		<designed target="Visible" value="true" ver="5"/>
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="Width" value="600" ver="5"/>
		<designed target="Height" value="500" ver="5"/>
		<designed target="SelectionBehavior" value="1" ver="5"/>
		<designed target="SelectionMode" value="3" ver="5"/>
		<designed target="LatestRowTracking" value="false" ver="5"/>
		<object access-modifier="private" name="Model" display-name="Model" uuid="f323950c-7b7c-4bbf-bc8b-4db7ea6cfbbb" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="5">
			<designed target="Frozen" value="false" ver="5"/>
			<designed target="MaxRowCount" value="10000" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="RowsRemoved">
				<body kind="om">
					<![CDATA[RowCount = GetRowCount();
IsModified = true;
Filter.UpdateComboBoxesData();]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="RowsInserted">
				<body kind="om">
					<![CDATA[RowCount = GetRowCount();
IsModified = true;]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_3" display-name="Handler_3" ver="5" event="DataChanged">
				<body kind="om">
					<![CDATA[if (View.Filter.Active && left >= 0 && right <= View.Filter.ComboBox.Length)
	View.Filter.UpdateComboBoxesData();]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="Column" display-name="Column" uuid="916b2228-6881-418d-a3c5-2efb1b325020" base-type="TableColumn" base-type-id="109c05c5-8dcf-4a8f-aedd-5bb547cca2d4" ver="5" cardinal="10">
			<designed target="Title" value="" ver="5"/>
			<designed target="Description" value="" ver="5"/>
			<designed target="Id" value="" ver="5"/>
			<designed target="BackgroundColor" value="0xffffffff" ver="5"/>
			<designed target="ForegroundColor" value="0xff000000" ver="5"/>
			<designed target="Font" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="5"/>
			<designed target="TextAlignment" value="129" ver="5"/>
			<designed target="TitleBackgroundColor" value="0xffffffff" ver="5"/>
			<designed target="TitleForegroundColor" value="4278190080" ver="5"/>
			<designed target="TitleFont" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="5"/>
			<designed target="Width" value="100" ver="5"/>
			<designed target="WidthResizeMode" value="0" ver="5"/>
			<designed target="Emptiable" value="true" ver="5"/>
			<designed target="Hidden" value="false" ver="5"/>
			<designed target="NumberFormat" value="%d" ver="5"/>
			<designed target="TimeFormat" value="dd.MM.yyyy hh:mm:ss.zzz" ver="5"/>
			<designed target="JsonFilter" value="" ver="5"/>
			<designed target="SortingEnabled" value="false" ver="5"/>
			<designed target="SortOrder" value="0" ver="5"/>
			<designed target="SortPriority" value="0" ver="5"/>
			<designed target="WordWrap" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="MouseDoubleClick">
				<body kind="om">
					<![CDATA[if (EditValue.Enabled)
	EditValue.Invoke();]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="WidthChanged">
				<body kind="om">
					<![CDATA[Filter.AdaptWidth();]]>
				</body>
			</do-on>
			<designed target="TitleTextAlignment" value="36" ver="5"/>
			<do-on access-modifier="private" name="Handler_3" display-name="Handler_3" ver="5" event="MouseRightTitleClick">
				<body kind="om">
					<![CDATA[ShowColumnsMenu.initX = ScreenX(MouseX, MouseY);
ShowColumnsMenu.initY = ScreenY(MouseX, MouseY);
ShowColumnsMenu.Invoke();]]>
				</body>
			</do-on>
			<designed target="ColumnOwnId" value="" ver="5"/>
			<designed target="SortMode" value="0" ver="5"/>
			<do-trace access-modifier="private" target="TitleBackgroundColor" ver="5">
				<body>
					<![CDATA[pTheme.BackgroundColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="TitleForegroundColor" ver="5">
				<body>
					<![CDATA[pTheme.ForegroundColor]]>
				</body>
			</do-trace>
			<do-on access-modifier="private" name="Handler_6" display-name="Handler_6" ver="5" event="MouseTitleClick">
				<body kind="om">
					<![CDATA[// меняем направление сортировки: прямая -> обратная -> отключена и т.д.
if (SortingEnabled)
{
	if (SortOrder == 0)
		SortOrder = 1; // меняем направление сортировки
	else SortingEnabled = false; // отключаем сортировку
}
else
{
	// включаем сортировку
	SortOrder = 0;
	SortingEnabled = true;
}

// eсли сортировка по новому столбцу, то увеличиваем приоритет
if (SortingEnabled && SortPriority != SortPriorityCount)
{
	SortPriorityCount = SortPriorityCount + 1;
	SortPriority = SortPriorityCount;
}

// сортируем таблицу
ApplySort();]]>
				</body>
			</do-on>
			<do-trace access-modifier="private" target="Font" ver="5">
				<body>
					<![CDATA[pTheme.Font]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="TitleFont" ver="5">
				<body>
					<![CDATA[pTheme.TitleFont]]>
				</body>
			</do-trace>
		</object>
		<object access-modifier="private" name="TableDecorator" display-name="TableDecorator" uuid="5e366011-e5c9-41e3-9c60-44a6f6ec1a6b" base-type="TableDecorator" base-type-id="2ff6a2d7-9573-4060-bfea-29c63d61b079" ver="5">
			<designed target="JsonDecorator" value="{}" ver="5"/>
		</object>
		<designed target="HeaderHeight" value="22" ver="5"/>
		<designed target="HeaderVisible" value="true" ver="5"/>
		<designed target="RowHeight" value="22" ver="5"/>
		<designed target="RowOrder" value="0" ver="5"/>
		<designed target="SelectionOverlayEnabled" value="true" ver="5"/>
		<designed target="DelayedSortingEnabled" value="false" ver="5"/>
		<designed target="HorizontalScrollMode" value="1" ver="5"/>
		<designed target="VerticalScrollMode" value="0" ver="5"/>
		<designed target="HorizontalScrollBarPolicy" value="0" ver="5"/>
		<designed target="VerticalScrollBarPolicy" value="0" ver="5"/>
		<object access-modifier="private" name="Filter" display-name="Filter" uuid="d1d8caa1-90f3-4237-946f-e6423740713e" base-type="Rectangle" base-type-id="15726dc3-881e-4d8d-b0fa-a8f8237f08ca" ver="5">
			<designed target="X" value="0" ver="5"/>
			<designed target="Y" value="22" ver="5"/>
			<designed target="ZValue" value="0" ver="5"/>
			<designed target="Rotation" value="0" ver="5"/>
			<designed target="Scale" value="1" ver="5"/>
			<designed target="Visible" value="true" ver="5"/>
			<designed target="Opacity" value="1" ver="5"/>
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="Tooltip" value="" ver="5"/>
			<designed target="Width" value="600" ver="5"/>
			<designed target="Height" value="20" ver="5"/>
			<designed target="RoundingRadius" value="0" ver="5"/>
			<designed target="PenColor" value="4278190080" ver="5"/>
			<designed target="PenStyle" value="0" ver="5"/>
			<designed target="PenWidth" value="1" ver="5"/>
			<designed target="BrushColor" value="4278190080" ver="5"/>
			<designed target="BrushStyle" value="0" ver="5"/>
			<object access-modifier="private" name="Active" display-name="Active" uuid="4916e613-7dc0-44cf-8570-205208397bbd" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5">
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
					<body kind="om">
						<![CDATA[i:int4 = 0;
if (value) {
	//Активируем фильтр
	Visible = true;
	HeaderHeight = TypeConvert.ToInt4(22 + Filter.Height);
	AdaptWidth();
	
	while (i < ComboBox.Length) {
		View.Column[i].JsonFilter = (ComboBox[i].selectedItemText == "")?(""):("{\"data\": \"*"+ComboBox[i].selectedItemText+"*\"}");
		i += 1;
	}
	UpdateComboBoxesData();
	
} else {
	//Выключаем фильтр
	Visible = false;
	HeaderHeight = 22;
	
	while (i < ComboBox.Length) {
		View.Column[i].JsonFilter = "";
		i += 1;
	}
}]]>
					</body>
				</do-on>
			</object>
			<do access-modifier="private" name="AdaptWidth" display-name="AdaptWidth" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[if (Filter.Active){
	//смещенения координаты и ширины
	shiftX: int4 = 2;
	shiftWidth: float = 3;
	
	currentX: int4 = 0;
	currentWidth: float = 0;	
	
	i:int4 = 0;
	while (i < ComboBox.Length){
		if (!View.Column[i].Hidden){
			currentWidth = View.GetColumnWidth(i);
			currentX = View.GetColumnLeft(i);
			
			if (currentX >= 0) {
				ComboBox[i].X = currentX + shiftX;
				ComboBox[i].Width = currentWidth - shiftWidth;
				ComboBox[i].Visible = true;
			} else if ((currentWidth + currentX) - 20 >= 0) {
				ComboBox[i].X = shiftX;
				ComboBox[i].Width = (currentWidth + currentX) - shiftWidth;
				ComboBox[i].Visible = true;
			} else {
				ComboBox[i].Visible = false;
			}	
			
		} else {
			ComboBox[i].Visible = false;
		}
		i += 1;
	}
}]]>
				</body>
			</do>
			<object access-modifier="private" name="ComboBox" display-name="ComboBox" uuid="b5c6d34d-2aed-47be-bddf-9c28e60bab4c" base-type="ComboBox" base-type-id="3495bcd2-01f2-4709-b7f4-e9cf6f3a00bc" ver="5" cardinal="7">
				<designed target="X" value="0" ver="5"/>
				<designed target="Y" value="0" ver="5"/>
				<designed target="ZValue" value="0" ver="5"/>
				<designed target="Rotation" value="0" ver="5"/>
				<designed target="Scale" value="1" ver="5"/>
				<designed target="Visible" value="true" ver="5"/>
				<designed target="Opacity" value="1" ver="5"/>
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="Tooltip" value="" ver="5"/>
				<designed target="Width" value="100" ver="5"/>
				<designed target="Height" value="20" ver="5"/>
				<designed target="Editable" value="true" ver="5"/>
				<designed target="Text" value="" ver="5"/>
				<designed target="SelectedIndex" value="-1" ver="5"/>
				<designed target="Font" value="Tahoma,8,-1,5,50,0,0,0,0,0" ver="5"/>
				<designed target="FontColor" value="4278190080" ver="5"/>
				<designed target="MaxVisibleItems" value="10" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="FocusChanged">
					<body kind="om">
						<![CDATA[if (Focus)
	FocusIndex = Index;
else 
	FocusIndex = -1;]]>
					</body>
				</do-on>
				<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="SelectedChanged">
					<body kind="om">
						<![CDATA[ApplyFilter(this.Index);]]>
					</body>
				</do-on>
				<object access-modifier="private" name="selectedItemText" display-name="selectedItemText" uuid="f5c6b6e0-64cc-4d57-9527-4a199c915712" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			</object>
			<object access-modifier="private" name="FocusIndex" display-name="FocusIndex" uuid="c78f73fd-a181-4113-a1b1-4c5af4b7768a" base-type="int8" base-type-id="1f8f5a02-c52c-4260-90d1-e3b1b93b3949" ver="5"/>
			<init target="Active" ver="5" value="false"/>
			<init target="FocusIndex" ver="5" value="-1"/>
			<do access-modifier="private" name="ApplyFilter" display-name="ApplyFilter" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[if ( ComboBox[filterIndex].Text != ComboBox[filterIndex].selectedItemText) {
	ComboBox[filterIndex].selectedItemText = ComboBox[filterIndex].Text;
	View.Column[filterIndex].JsonFilter = (ComboBox[filterIndex].Text != "")?("{\"text\": \"*"+escapeHtml(ComboBox[filterIndex].selectedItemText)+"*\"}"):("");
	UpdateComboBoxesData();
}]]>
				</body>
				<param access-modifier="private" name="filterIndex" display-name="" uuid="fda6e970-ea52-4d89-acc8-b2690dada7f1" base-type="int8" base-type-id="1f8f5a02-c52c-4260-90d1-e3b1b93b3949" ver="5"/>
			</do>
			<do access-modifier="private" name="UpdateComboBoxesData" display-name="UpdateComboBoxesData" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="javascript">
					<![CDATA[var currentBoxData = new Set();
for (var comboBoxIndex = 0; comboBoxIndex < ComboBox.Length; comboBoxIndex++){
	currentBoxData.clear();
	ComboBox[comboBoxIndex].Clear();
	ComboBox[comboBoxIndex].AddItem("");	//элемент по индексу 0 - фильтр отключен
	
	for (var tableRowIndex = 0; tableRowIndex < View.GetRowCount(); tableRowIndex++){
		var currentCellData = View.GetCellData(tableRowIndex,comboBoxIndex);
		if (currentCellData != "") currentBoxData.add(currentCellData);
	}
	
	for (var element of currentBoxData){
		ComboBox[comboBoxIndex].AddItem(element);
	}
	ComboBox[comboBoxIndex].SelectedIndex = ComboBox[comboBoxIndex].IndexOf(ComboBox[comboBoxIndex].selectedItemText);
}
]]>
				</body>
			</do>
			<do access-modifier="private" name="escapeHtml" display-name="escapeHtml" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
				<body kind="javascript">
					<![CDATA[return input.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;").replace(/\\/g, '\\\\');]]>
				</body>
				<param access-modifier="private" name="input" display-name="" uuid="8fa22091-97a9-43dc-8106-a11fa3a98be0" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			</do>
		</object>
		<do access-modifier="private" name="Init" display-name="Init" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[if (TableModel.GetColumnCount() == 0)
{
	// Инициализация таблицы
	Column[0].Title = "Тип";
	Column[0].Id = "type";
	
	Column[1].Title = "Сигнал";
	Column[1].Id = "signal";
	
	Column[2].Title = "Значение";
	Column[2].Id = "value";
	
	Column[3].Title = "Единицы измерения";
	Column[3].Id = "units";
	Column[3].NumberFormat = "%g";
	
	Column[4].Title = "Качество";
	Column[4].Id = "quality";
	
	Column[5].Title = "Время";
	Column[5].Id = "time";
	
	Column[6].Title = "Описание";
	Column[6].Id = "description";
	
	Column[7].Title = "Состояние подписки";
	Column[7].Id = "subscription";
	Column[7].Hidden = true;
	
	Column[8].Id = "qualityUint4";
	Column[8].Hidden = true;
	
	Column[9].Id = "ItemIndex";
	Column[9].Hidden = true;
		
	TableModel.AddColumn("type","","","","string",false,true);
	TableModel.AddColumn("signal","","","","string",false,true);
	TableModel.AddColumn("value","","","","variant",false,true);
	TableModel.AddColumn("units","","","","string",false,true);
	TableModel.AddColumn("quality","","","","string",false,true);
	TableModel.AddColumn("time","","","","timestamp",false,true);
	TableModel.AddColumn("description","","","","string",false,true);
	TableModel.AddColumn("subscription","","","","string",false,true);
	TableModel.AddColumn("qualityUint4","","","","uint4",false,true);
	TableModel.AddColumn("ItemIndex","","","","int8",false,true);
	
	TableDecorator.JsonDecorator = GetJsonDecorator();
}]]>
			</body>
		</do>
		<do access-modifier="private" name="GetJsonDecorator" display-name="GetJsonDecorator" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[var decorator = {};

decorator.StyleDictionary = [
	{
		'style_name': "badQuality_rowStyle",
		'style': {'background_color':'#ffffe1e1'}
	}, {
		'style_name': "uncertainQuality_rowStyle",
		'style': {'background_color':'#fff0f0f0'}
	}, {
		'style_name': "goodQuality_rowStyle",
		'style': {'background_color':'#ffe5ffe5'}
	}, {
		'style_name': "localOverdriveQuality_rowStyle",
		'style': {'background_color':'#ffeeffd6'}
	}
];

decorator.Decorating = [
	{
		'decoration_rule_name': "badQuality_decorationRule",
		'decoration_rule': {'and':[{'>=':{'data:qualityUint4':0}},{'<=':{'data:qualityUint4':63}}]},
		'rowstyle': "badQuality_rowStyle"
	}, {
		'decoration_rule_name': "uncertainQuality_decorationRule",
		'decoration_rule': {'and':[{'>=':{'data:qualityUint4':64}},{'<=':{'data:qualityUint4':191}}]},
		'rowstyle': "uncertainQuality_rowStyle"
	}, {
		'decoration_rule_name': "goodQuality_decorationRule",
		'decoration_rule': {'and':[{'>=':{'data:qualityUint4':192}},{'<=':{'data:qualityUint4':200}}]},
		'rowstyle': "goodQuality_rowStyle"
	}, {
		'decoration_rule_name': "localOverdriveQuality_decorationRule",
		'decoration_rule': {'>=':{'data:qualityUint4':216}},
		'rowstyle': "localOverdriveQuality_rowStyle"
	}
];

decorator.FormatDictionary = [
	{
		'format_name': "timeStampFormat",
		'format': {	'var_format':[{'value_type': "TimestampType", 'text_format':"dd.MM.yyyy hh:mm:ss"}] }
	}, {
		'format_name': "floatFormat",
		'format': { 'var_format':[{'value_type': "FloatTypeCategory", 'text_format': "%.7g"}] }
	}, {
		'format_name': "doubleFormat",
		'format': { 'var_format':[{'value_type': "FloatTypeCategory", 'text_format': "%.15g"}] }
	}, {
		'format_name': "intFormat",
		'format': { 'var_format':[{'value_type': "IntegerTypeCategory", 'text_format': "%d"}] }
	}, {
		'format_name': "uintFormat",
		'format': { 'var_format':[{'value_type': "IntegerTypeCategory", 'text_format': "%llu"}] }
	}, {
		'format_name': "longFormat",
		'format': { 'var_format':[{'value_type': "IntegerTypeCategory", 'text_format': "%lld"}] }
	}
];

decorator.Formatting = [
	{
		'formatting_rule_name': "timeColumnRule",
		'formatting_column': "time",
		'format': "timeStampFormat"
	}, {
		'formatting_rule_name': "valueColumnRule",
		'formatting_column': "value",
		'conditions': [
			{ 'condition': {'data:type': "float" }, 'format': "floatFormat" },
			{ 'condition': {'data:type': "double" }, 'format': "doubleFormat" },
			{ 'condition': {'or': [{'data:type': "int1" }, {'data:type': "uint1" }, {'data:type': "int2" }, {'data:type': "uint2" }, {'data:type': "int4" }]}, 'format': "intFormat" },
			{ 'condition': {'or': [{'data:type': "uint4" }, {'data:type': "uint8" }]}, 'format': "uintFormat" },
			{ 'condition': {'data:type': "int8"}, 'format': "longFormat" }
		]
	}
];

return JSON.stringify(decorator, null, 2);]]>
			</body>
		</do>
		<designed target="BackgroundColor" value="0xffffffff" ver="5"/>
		<designed target="FrameColor" value="0xff000000" ver="5"/>
		<designed target="GridColor" value="0xffa0a0a0" ver="5"/>
		<do-trace access-modifier="private" target="BackgroundColor" ver="5">
			<body>
				<![CDATA[pTheme.EditorBrushColor]]>
			</body>
		</do-trace>
		<do-trace access-modifier="private" target="FrameColor" ver="5">
			<body>
				<![CDATA[pTheme.BorderColor]]>
			</body>
		</do-trace>
		<do access-modifier="private" name="GetCurrentSelectedRow" display-name="GetCurrentSelectedRow" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
			<body kind="javascript">
				<![CDATA[var selectedRow = JSON.parse(View.GetSelectedRows());
return (selectedRow.length > 0)?(View.MapRowToModel(selectedRow[0])):(-1);]]>
			</body>
		</do>
		<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="SelectionChanged">
			<body kind="javascript">
				<![CDATA[SelectedRowCount = JSON.parse(GetSelectedRows()).length;]]>
			</body>
		</do-on>
		<object access-modifier="private" name="SortPriorityCount" display-name="SortPriorityCount" uuid="53a1a90b-98cd-4a4e-b3e7-bbf089e17b92" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		<do-trace access-modifier="private" target="GridColor" ver="5">
			<body>
				<![CDATA[pTheme.DisabledBorderColor]]>
			</body>
		</do-trace>
		<do-on access-modifier="private" name="Handler_5" display-name="Handler_5" ver="5" event="ScrollMove">
			<body kind="om">
				<![CDATA[if (direction == 0)
	Filter.AdaptWidth();]]>
			</body>
		</do-on>
		<object access-modifier="private" name="ShowColumnsMenu" display-name="ShowColumnsMenu" uuid="13b9afbe-37a3-497d-bcfc-21dbcbbd3bed" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<object access-modifier="private" name="initX" display-name="initX" uuid="6e6a5e3a-3dcc-4f28-969c-da4c5c1bc82f" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="initY" display-name="initY" uuid="431933e9-6aad-4942-84cc-ed50a54467b9" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-new" form-by-id="false">
				<object access-modifier="private" uuid="cfc8bef7-07bd-4af9-98c1-fd5dee6915d4" base-type="Menu" base-type-id="07bb4545-980a-4140-bbaa-4d1397447864" ver="5">
					<init target="pResult" ver="5" ref="MenuResult"/>
					<init target="pTheme" ver="5" ref="here.private.theme"/>
					<init target="pAction" ver="5" ref="OnComplete"/>
					<init target="Items" ver="5">
						<expr>
							<![CDATA[GetMenuItems()]]>
						</expr>
					</init>
					<init target="WindowX" ver="5">
						<expr>
							<![CDATA[initX]]>
						</expr>
					</init>
					<init target="WindowY" ver="5">
						<expr>
							<![CDATA[initY]]>
						</expr>
					</init>
				</object>
			</do-on>
			<object access-modifier="private" name="OnComplete" display-name="OnComplete" uuid="4e351ab6-71e1-45b1-a762-7cbc62f6baa7" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[i:int4 = String.ToInt4(MenuResult.Id, -1);
if (i >= 0 && i < Column.Length)
{
	Column[i].Hidden = !Column[i].Hidden;
	Filter.AdaptWidth();
}]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="MenuResult" display-name="MenuResult" uuid="94d4814b-7a15-4e4f-a17c-1f6434e8063a" base-type="MenuResult" base-type-id="0fe7658c-92f4-4af7-b038-3594414ac651" ver="5"/>
			<do access-modifier="private" name="GetMenuItems" display-name="GetMenuItems" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
				<body kind="javascript">
					<![CDATA[const columnMaxCount = 7;

var items = [];
for (var i = 0; i < columnMaxCount; i++) {
	var column = Column[i];
	
	items.push({
		'id': i,
		'title': column.Title,
		'active': (column.Id != "signal"),		
		'checked': !column.Hidden,
		'staysOpen': true
	});
}

return JSON.stringify(items);]]>
				</body>
			</do>
		</object>
		<object access-modifier="private" name="ShowContextMenu" display-name="ShowContextMenu" uuid="e05e7e56-7b55-4432-a0c3-44ab25b70e58" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<object access-modifier="private" name="initX" display-name="initX" uuid="d402892e-dc1f-4850-8682-562ce5b74fd3" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<object access-modifier="private" name="initY" display-name="initY" uuid="9f76a87e-7ed9-4344-9a4b-3863a57a20e8" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-by-id="false" form-action="open-new">
				<object access-modifier="private" uuid="360d4a39-6c15-49e8-9be7-a068230f7ba7" base-type="Menu" base-type-id="07bb4545-980a-4140-bbaa-4d1397447864" ver="5">
					<init target="pResult" ver="5" ref="MenuResult"/>
					<init target="pAction" ver="5" ref="OnComplete"/>
					<init target="WindowX" ver="5" ref="initX"/>
					<init target="WindowY" ver="5" ref="initY"/>
					<init target="pTheme" ver="5" ref="here.private.theme"/>
					<init target="Items" ver="5">
						<expr>
							<![CDATA[GetMenuItems()]]>
						</expr>
					</init>
				</object>
			</do-on>
			<object access-modifier="private" name="MenuResult" display-name="MenuResult" uuid="6f99ae7e-aa91-457f-adfb-f5be2cacd09d" base-type="MenuResult" base-type-id="0fe7658c-92f4-4af7-b038-3594414ac651" ver="5"/>
			<object access-modifier="private" name="OnComplete" display-name="OnComplete" uuid="50333c9d-c1d2-4d9b-a688-0b0ae52eefef" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[if (MenuResult.Id == "addItem")
	AddItem.Invoke();
else if (MenuResult.Id == "deleteSelected")
	DeleteSelected.Invoke();
else if (MenuResult.Id == "addSeparatorRow")
	AddSeparator.Invoke();
else if (MenuResult.Id == "selectAll")
	SelectAll.Invoke();
else if (MenuResult.Id == "deleteUnselected")
	DeleteUnselected.Invoke();
else if (MenuResult.Id == "editValue")
	EditValue.Invoke();]]>
					</body>
				</do-on>
			</object>
			<do access-modifier="private" name="GetMenuItems" display-name="GetMenuItems" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
				<body kind="javascript">
					<![CDATA[var items = [];

items.push({
	'id': "addItem",
	'title': "Добавить новый сигнал...",
	'icon': "Explorer_Icons/Add16.png",
	'active': AddItem.Enabled
});

items.push({
	'id': "deleteSelected",
	'title': "Удалить выделенные сигналы",
	'icon': "Explorer_Icons/Remove16.png",
	'active': DeleteSelected.Enabled
});

items.push({
	'id': "addSeparatorRow",
	'title': "Добавить разделитель",
	'active': AddSeparator.Enabled
});

items.push({ 'title': "-" });

items.push({
	'id': "selectAll",
	'title': "Выделить все сигналы",
	'active': SelectAll.Enabled
});

items.push({
	'id': "deleteUnselected",
	'title': "Оставить только выделенные сигналы",
	'active': DeleteUnselected.Enabled
});

items.push({ 'title': "-" });

items.push({
	'id': "editValue",
	'title': "Изменить значение сигнала....",
	'active': EditValue.Enabled
});

return JSON.stringify(items);]]>
				</body>
			</do>
		</object>
		<do access-modifier="private" name="IsEmptyDataRow" display-name="IsEmptyDataRow" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="om">
				<![CDATA[path: string = Variant.ToString(TableModel.GetCellData(rowInModel, 1), "");
dataType: string = Variant.ToString(TableModel.GetCellData(rowInModel,0), "");
return path == "" && dataType == "";]]>
			</body>
			<param access-modifier="private" name="rowInModel" display-name="" uuid="2f433751-f6eb-4ad3-9cec-9625f34f8ef8" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
		<do-on access-modifier="private" name="Handler_6" display-name="Handler_6" ver="5" event="MouseRelease">
			<body kind="om">
				<![CDATA[if (button == 2)
{
	ShowContextMenu.initX = ScreenX(MouseX, MouseY);
	ShowContextMenu.initY = ScreenY(MouseX, MouseY);
	ShowContextMenu.Invoke();
}]]>
			</body>
		</do-on>
		<init target="TableModel" ver="5" ref="Model"/>
		<object access-modifier="private" name="RowCount" display-name="RowCount" uuid="1497dee7-31e6-4b0b-8355-4e0293af4941" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5"/>
		<object access-modifier="private" name="SelectedRowCount" display-name="SelectedRowCount" uuid="362d6c12-60b5-4b1c-8b19-412e3fb72d7f" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5"/>
	</object>
	<object access-modifier="private" name="Item" display-name="Item" uuid="4ee047f4-541a-48c4-b733-51ba9dc77522" base-type="ApItem" base-type-id="9bc9fdb8-ccbc-45af-b711-95945c17a630" ver="5" cardinal="500">
		<init target="Path" ver="5" value="**"/>
		<object access-modifier="private" name="InModelRow" display-name="InModelRow" uuid="3f7bc102-0470-46b6-bf2c-e1709ed095c5" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnDescriptionChanged">
			<body kind="om">
				<![CDATA[if (InModelRow != -1)
	View.TableModel.SetCellData(InModelRow, 6, description);]]>
			</body>
		</do-on>
		<init target="InModelRow" ver="5" value="-1"/>
		<do-on access-modifier="private" name="Handler_5" display-name="Handler_5" ver="5" event="OnQualityChanged">
			<body kind="om">
				<![CDATA[if (InModelRow != -1)  {
	View.TableModel.SetCellData(InModelRow, 8, value );
	View.TableModel.SetCellData(InModelRow, 4, private.GetQualityCode(value));
}]]>
			</body>
		</do-on>
		<do-on access-modifier="private" name="Handler_6" display-name="Handler_6" ver="5" event="OnUnitsChanged">
			<body kind="om">
				<![CDATA[if (InModelRow != -1)
	View.TableModel.SetCellData(InModelRow, 3, units); ]]>
			</body>
		</do-on>
		<do-on access-modifier="private" name="Handler_7" display-name="Handler_7" ver="5" event="OnValueChanged">
			<body kind="om">
				<![CDATA[if (InModelRow != -1)
	View.TableModel.SetCellData(InModelRow, 2, value);]]>
			</body>
		</do-on>
		<do-on access-modifier="private" name="Handler_8" display-name="Handler_8" ver="5" event="OnTimeStampChanged">
			<body kind="om">
				<![CDATA[if (InModelRow != -1) 
	View.TableModel.SetCellData(InModelRow, 5, time ); ]]>
			</body>
		</do-on>
		<do-on access-modifier="private" name="Handler_9" display-name="Handler_9" ver="5" event="OnAdviseStateChanged">
			<body kind="om">
				<![CDATA[if (adviseState == 2 && InModelRow != -1)
	View.TableModel.SetCellData(InModelRow, 0, private.Converter.CanonicalTypeToDataType(CanonicalType));]]>
			</body>
		</do-on>
		<init target="Source" ver="5" ref="init_ApSource"/>
	</object>
	<param access-modifier="private" name="init_ApSource" display-name="init_ApSource" uuid="90757216-de69-43f8-be49-7f392a874ea6" base-type="ApSource" base-type-id="966603da-f05e-4b4d-8ef0-919efbf8ab2c" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="private" display-name="private" uuid="0a6712e9-7ad0-4245-8a95-a2f051a014f1" base-type="" base-type-id="00000000-0000-0000-0000-000000000000" ver="5">
		<object access-modifier="private" name="Files" display-name="Files" uuid="bbab4c9c-2f44-4f70-97d2-1e8873c962a7" base-type="FileSystem" base-type-id="34d744f9-7303-4077-a3f7-9c06c0945512" ver="5">
			<designed target="RootPath" value="/" ver="5"/>
		</object>
		<object access-modifier="private" name="theme" display-name="theme" uuid="35db34df-6dda-48eb-a71c-e631c348f4aa" base-type="Theme" base-type-id="05d4d7df-0f8e-4ec1-ac85-b5460e30af81" ver="5">
			<do-trace access-modifier="private" target="BackgroundColor" ver="5">
				<body>
					<![CDATA[pTheme.BackgroundColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="ForegroundColor" ver="5">
				<body>
					<![CDATA[pTheme.ForegroundColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="DisabledFontColor" ver="5">
				<body>
					<![CDATA[pTheme.DisabledFontColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="EditorBrushColor" ver="5">
				<body>
					<![CDATA[pTheme.EditorBrushColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="EditorFontColor" ver="5">
				<body>
					<![CDATA[pTheme.EditorFontColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="SelectionColor" ver="5">
				<body>
					<![CDATA[pTheme.SelectionColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="BorderColor" ver="5">
				<body>
					<![CDATA[pTheme.BorderColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="DisabledBorderColor" ver="5">
				<body>
					<![CDATA[pTheme.DisabledBorderColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="Font" ver="5">
				<body>
					<![CDATA[pTheme.Font]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="TitleFont" ver="5">
				<body>
					<![CDATA[pTheme.TitleFont]]>
				</body>
			</do-trace>
		</object>
		<do access-modifier="private" name="GetQualityCode" display-name="GetQualityCode" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[// Функция формирования описания качества сигнала
var value = numb;
var result = `${value}`;
var bitState = "";

if (value >= 0 && value < 4) result = `плохое: ${value} - Bad`;
if (value >= 4 && value < 8) result = `плохое: ${value} - Configuration Error`;
if (value >= 8 && value < 12) result = `плохое: ${value} - Not Connected`;
if (value >= 12 && value < 16) result = `плохое: ${value} - Device Failure`;
if (value >= 16 && value < 20) result = `плохое: ${value} - Sensor Failure`;
if (value >= 20 && value < 24) result = `плохое: ${value} - Last Known Value:`;
if (value >= 24 && value < 28) result = `плохое: ${value} - Comm Failure`;
if (value >= 28 && value < 32) result = `плохое: ${value} - Out of Service`;
if (value >= 32 && value < 36) result = `плохое: ${value} - Waiting For Initial Data`;
if (value >= 36 && value < 64) result = `плохое: ${value}`;
if (value >= 64 && value < 68) result = `неопределённое: ${value} - Uncertain`;
if (value >= 68 && value < 72) result = `неопределённое: ${value} - Last Usable Value`;
if (value >= 72 && value < 80) result = `неопределённое: ${value}`;
if (value >= 80 && value < 84) result = `неопределённое: ${value} - Sensor Not Accurate`;
if (value >= 84 && value < 88) result = `неопределённое: ${value} - Engineering Units Exceeded`;
if (value >= 88 && value < 92) result = `неопределённое: ${value} - Sub-Normal`;
if (value >= 92 && value < 128) result = `неопределённое: ${value}`;
if (value >= 128 && value < 192) result = `${value}`;
if (value >= 192 && value < 196) result = `хорошее: ${value} - Good`;
if (value >= 196 && value < 216 || value >= 220) result = `хорошее: ${value}`;
if (value >= 216 && value < 220) result = `хорошее: ${value} - Local Override`;

// Проверяем на наличие младших байтов (состояния Low, High, Constant)
if ((value & 1) == 1) bitState = " (Low)";
if ((value & 2) == 2) bitState = " (High)";
if ((value & 3) == 3) bitState = " (Const)";
result += bitState;

return result;]]>
			</body>
			<param access-modifier="private" name="numb" display-name="" uuid="2fc90076-ec5f-44d8-a785-6715c2dfea6d" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		</do>
		<do access-modifier="private" name="DeleteRows" display-name="DeleteRows" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[var rows = JSON.parse(jsonRows);
if (rows.length > 0)
{
	var sortedRows = rows.sort((a, b) => b - a);
	for (let row of sortedRows)
	{
		var rowInModel = View.MapRowToModel(row);
	
		// отписываемся
		var itemIndex = View.TableModel.GetCellData(rowInModel, 9);
		if (itemIndex != -1)
		{
			Item[itemIndex].Path = "**";
			Item[itemIndex].InModelRow = -1;
		}
	
		View.TableModel.RemoveRow(rowInModel);
	}
	private.UpdateItemsRowIndex();
}]]>
			</body>
			<param access-modifier="private" name="jsonRows" display-name="" uuid="87aef469-5298-4ab1-8417-50521f29705b" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		</do>
		<do access-modifier="private" name="UpdateItemsRowIndex" display-name="UpdateItemsRowIndex" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[row: int4 = 0;
while (row < View.TableModel.GetRowCount())
{
	itemIndex: int4 = Variant.ToInt4(View.TableModel.GetCellData(row, 9), -1);
	if (itemIndex != -1)
		Item[itemIndex].InModelRow = row;

	row += 1;
}]]>
			</body>
		</do>
		<object access-modifier="private" name="Converter" display-name="Converter" uuid="4d5c8cc5-e494-4b89-a153-1aab0d950d61" base-type="Converter" base-type-id="9846118d-6c33-44f8-8ff4-f502280dd5c0" ver="5"/>
	</object>
	<object access-modifier="private" name="pLog" display-name="pLog" uuid="49b67526-84be-47f6-aada-ffaf93ce5032" base-type="LogView" base-type-id="493c7166-bdbb-4717-8f49-2906ed88e930" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pTheme" display-name="pTheme" uuid="ab9f94bd-916c-4dfa-8e4e-96984c723596" base-type="Theme" base-type-id="05d4d7df-0f8e-4ec1-ac85-b5460e30af81" base-const="true" base-ref="true" ver="5"/>
	<do access-modifier="private" name="Clear" display-name="Clear" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[itemIndex: int4;			// индекс item[]
rowIndex: int4 = 0;		// индекс строки в модели данных
while (rowIndex < View.TableModel.GetRowCount())
{
	itemIndex = Variant.ToInt4(View.TableModel.GetCellData(rowIndex, 9), -1);
	if (itemIndex != -1)
	{
		Item[itemIndex].Path = "**";
		Item[itemIndex].InModelRow = -1;
	}
	rowIndex += 1;
}
View.TableModel.Clear();]]>
		</body>
	</do>
	<do access-modifier="private" name="Add" display-name="Add" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<param access-modifier="private" name="path" display-name="" uuid="d60527e3-4d44-4fe2-9867-b4d2f78c5886" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<body kind="om">
			<![CDATA[index: int4 = View.TableModel.GetRowCount();
Insert(index, path, dataType);]]>
		</body>
		<param access-modifier="private" name="dataType" display-name="" uuid="fe1e8748-34d8-4b5f-994d-3c6207710986" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<do access-modifier="private" name="Insert" display-name="Insert" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[// Проверим, что сигнал еще не добавлен
currentItem: int4 = 0;
while (currentItem < Item.Length)
{
	if (Item[currentItem].Path == path && Item[currentItem].InModelRow != -1)
		return;
	currentItem += 1;
}

// Внесение данных в таблицу
currentItem = 0;
while (currentItem < Item.Length)
{
	if (Item[currentItem].Path == "**" && Item[currentItem].InModelRow == -1)
	{
		View.TableModel.InsertRow(index);
		View.TableModel.SetCellData(index, 0, dataType);
		View.TableModel.SetCellData(index, 1, path);
		View.TableModel.SetCellData(index, 9, currentItem);
		private.UpdateItemsRowIndex();

		// подписываемся
		Item[currentItem].InModelRow = index;
		Item[currentItem].Path = path;
		break;
	}
	currentItem += 1;
}]]>
		</body>
		<param access-modifier="private" name="index" display-name="" uuid="9761de0c-136f-448d-ab74-a54d8549e8ab" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		<param access-modifier="private" name="path" display-name="" uuid="d9449d4f-2003-4213-9a42-a8ebbe133f91" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<param access-modifier="private" name="dataType" display-name="" uuid="682c05ce-836e-4ccc-959a-84794279b0bb" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<do access-modifier="private" name="InsertSeparator" display-name="InsertSeparator" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[View.TableModel.InsertRow(index);
View.TableModel.SetCellData(index, 0, "");
View.TableModel.SetCellData(index, 1, "");
View.TableModel.SetCellData(index, 9, -1);
private.UpdateItemsRowIndex();]]>
		</body>
		<param access-modifier="private" name="index" display-name="" uuid="c67250f5-afcc-4ee8-8c44-a2e586d8c7f8" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
	</do>
	<do access-modifier="private" name="GetItems" display-name="GetItems" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="javascript">
			<![CDATA[var items = [];
var model = View.TableModel;
var count = model.GetRowCount();
for (let row = 0; row < count; row++)
{
	var path = model.GetCellData(row, 1);
	var type = model.GetCellData(row, 0);
	items.push({'tag': path, 'datatype': type});
}
return JSON.stringify(items, null, 2)]]>
		</body>
	</do>
	<do access-modifier="private" name="LoadItems" display-name="LoadItems" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="javascript">
			<![CDATA[if (signals != "")
{
	var signalsData;	
	try 
	{
		signalsData = JSON.parse(signals);
	}
	catch (err) 
	{
		log("Ошибка загрузки списка сигналов - " + err.message);
		return;
	}
	
	View.Init();
	for (let [i, signal] of signalsData.entries())
	{
		if (signal.hasOwnProperty("tag") && signal.hasOwnProperty("datatype"))
		{
			var path = signal.tag;
			var type = signal.datatype;
			
			//признак разделителя path = null, type = null 
			if (path != null && path != "" && type != null)
				Insert(i, path, type)
			else InsertSeparator(i);
		}
	}
}]]>
		</body>
		<param access-modifier="private" name="signals" display-name="" uuid="59822d5a-8c81-451b-99a8-2c99af0a8098" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<do access-modifier="private" name="GetViewSettings" display-name="GetViewSettings" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="javascript">
			<![CDATA[var settings = 
	{
		"Columns" : {}
	};

for (var i = 0; i < View.Column.Length; i++)
{		
	var column = View.Column[i];
	var columnInfo = {
		"Index": column.Index,
		"Width": column.Width,
		"Hidden": column.Hidden
	};
	if (column.SortingEnabled != false)
	{
		columnInfo.SortOrder = column.SortOrder;
		columnInfo.SortPriority = column.SortPriority;
	}
	settings.Columns[column.Id] = columnInfo;
}

return JSON.stringify(settings);]]>
		</body>
	</do>
	<do access-modifier="private" name="UpdateView" display-name="UpdateView" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<param access-modifier="private" name="settings" display-name="" uuid="72fd7512-ed37-4d93-9caa-734ff1748443" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<body kind="javascript">
			<![CDATA[var signalTable = JSON.parse(settings);
if (signalTable.Columns != undefined)
{
	View.Init();
	for (var i = 0; i < View.Column.Length; i++)
	{
		var column = View.Column[i];
		var columnInfo = signalTable.Columns[column.Id];
		if (columnInfo != undefined)
		{
			column.Width = columnInfo.Width;
			column.Hidden = columnInfo.Hidden;
			column.SortingEnabled = columnInfo.SortOrder != undefined;
			if (column.SortingEnabled)
			{
				column.SortOrder = columnInfo.SortOrder;
				column.SortPriority = columnInfo.SortPriority;
			}
		}
	}
}]]>
		</body>
	</do>
	<designed target="Flip" value="0" ver="5"/>
	<object access-modifier="private" name="IsModified" display-name="IsModified" uuid="4b70aa93-e8d5-404f-ae4c-61c0e3f01801" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
	<object access-modifier="private" name="AddItem" display-name="AddItem" uuid="c0553c4b-7fe5-48f8-a3df-f0b5c45844de" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="InvokeTrigger" value="false" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
			<body kind="om">
				<![CDATA[currentRowSelected: int4 = View.GetCurrentSelectedRow();
if (currentRowSelected != -1)
	DialogResult.InputText = Variant.ToString(View.TableModel.GetCellData(currentRowSelected, 1), "");
ShowDialog.Invoke();]]>
			</body>
		</do-on>
		<object access-modifier="private" name="ShowDialog" display-name="ShowDialog" uuid="a329c778-9a25-42f7-b7db-44ec3778428c" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
				<object access-modifier="private" uuid="5ef03b1d-de47-473d-b325-35d09f2a8751" base-type="Explorer_InputDialog" base-type-id="eb80f6e6-d9d7-4ca5-a3e9-34863ab130d2" ver="5">
					<init target="OkAction" ver="5" ref="OnComplete"/>
					<designed target="WindowCaption" value="Добавить новый сигнал..." ver="5"/>
					<init target="pTheme" ver="5" ref="private.theme"/>
					<init target="Result" ver="5" ref="DialogResult"/>
					<designed target="WindowIconPath" value="Explorer_Icons/Add16.png" ver="5"/>
				</object>
			</do-on>
		</object>
		<object access-modifier="private" name="OnComplete" display-name="OnComplete" uuid="b7d37cf2-f024-4f82-b98e-72178cddf6bd" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
				<body kind="om">
					<![CDATA[index: int4 = View.GetCurrentSelectedRow();
if (index > -1)
	Insert(index + 1, DialogResult.Value, "");
else Add(DialogResult.Value, "");]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="DialogResult" display-name="DialogResult" uuid="3383157c-9727-47d2-bb93-d7b5461b6e7c" base-type="Explorer_InputDialogResult" base-type-id="cdcda119-652b-45ed-bfc4-8cc21b98730d" ver="5">
			<do-trace access-modifier="private" target="Error" ver="5">
				<body>
					<![CDATA[InputText == "" ? "Значение не может быть пустым" : ""]]>
				</body>
			</do-trace>
		</object>
	</object>
	<object access-modifier="private" name="AddSeparator" display-name="AddSeparator" uuid="dfb9ee79-717d-4099-9df4-2dea258795a5" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="InvokeTrigger" value="false" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
			<body kind="om">
				<![CDATA[selectedRow: int4 = View.GetCurrentSelectedRow();
index: int4 = selectedRow > -1 ? selectedRow + 1 : View.TableModel.GetRowCount();
InsertSeparator(index);]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="SelectAll" display-name="SelectAll" uuid="d7789d9d-983d-4ca6-a08f-509ae54d4f07" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
		<designed target="Enabled" value="false" ver="5"/>
		<designed target="InvokeTrigger" value="false" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
			<body kind="javascript">
				<![CDATA[var rows = [];
for (let row = 0; row < View.GetRowCount(); row++)
	rows.push(row);

View.SetSelectedRows(JSON.stringify(rows));]]>
			</body>
		</do-on>
		<do-trace access-modifier="private" target="Enabled" ver="5">
			<body>
				<![CDATA[View.RowCount > View.SelectedRowCount]]>
			</body>
		</do-trace>
	</object>
	<object access-modifier="private" name="DeleteSelected" display-name="DeleteSelected" uuid="094f3bc7-132a-445c-b759-8db1ea8e344e" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="InvokeTrigger" value="false" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
			<body kind="om">
				<![CDATA[private.DeleteRows(View.GetSelectedRows());]]>
			</body>
		</do-on>
		<do-trace access-modifier="private" target="Enabled" ver="5">
			<body>
				<![CDATA[View.SelectedRowCount > 0]]>
			</body>
		</do-trace>
	</object>
	<object access-modifier="private" name="DeleteUnselected" display-name="DeleteUnselected" uuid="473f8ec9-41ca-41ce-bc1b-0eb743dabaac" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="InvokeTrigger" value="false" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
			<body kind="javascript">
				<![CDATA[var unselectedRows = [];
for (let row = 0; row < View.GetRowCount(); row++)
{
	if (!View.IsRowSelected(row))
		unselectedRows.push(row);
}
private.DeleteRows(JSON.stringify(unselectedRows));]]>
			</body>
		</do-on>
		<do-trace access-modifier="private" target="Enabled" ver="5">
			<body>
				<![CDATA[View.RowCount > View.SelectedRowCount]]>
			</body>
		</do-trace>
	</object>
	<object access-modifier="private" name="EditValue" display-name="EditValue" uuid="a6a04a8c-2291-42f1-959b-f573b065578e" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="InvokeTrigger" value="false" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
			<body kind="javascript">
				<![CDATA[var selectedRows = JSON.parse(View.GetSelectedRows());
if (selectedRows.length == 0) return;

// подсчитываем количество и определяем первый выделенный сигнал
var firstItemRow;
var selectedItemCount = 0;
for (let rowIndex of selectedRows)
{
	var row = View.MapRowToModel(rowIndex);
	if (!View.IsEmptyDataRow(row))
	{
		if (firstItemRow == undefined)
			firstItemRow = row;
		selectedItemCount += 1;
	}
}

if (firstItemRow != undefined)
{
	PrepareFields(firstItemRow, selectedItemCount);		
	ShowDialog.Invoke();
}]]>
			</body>
		</do-on>
		<do-trace access-modifier="private" target="Enabled" ver="5">
			<body>
				<![CDATA[View.SelectedRowCount > 0]]>
			</body>
		</do-trace>
		<object access-modifier="private" name="ShowDialog" display-name="ShowDialog" uuid="300a3709-233d-4ae4-960b-6fefabe2bd89" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-dialog" form-by-id="false">
				<object access-modifier="private" uuid="8aa62bc6-2cc7-45dc-8366-5f6457987df9" base-type="Explorer_AdvancedDialog" base-type-id="dca73575-bbaf-4f5e-93c4-5d93e793a809" ver="5">
					<init target="pTheme" ver="5" ref="private.theme"/>
					<init target="OkAction" ver="5" ref="OnComplete"/>
					<do-trace access-modifier="private" target="BrushColor" ver="5">
						<body kind="om">
							<![CDATA[pTheme.BackgroundColor]]>
						</body>
					</do-trace>
					<init target="Result" ver="5" ref="DialogResult"/>
					<init target="DataType" ver="5" ref="dataType"/>
					<designed target="WindowIconPath" value="Explorer_Icons/Explorer.ico" ver="5"/>
					<init target="Title" ver="5" ref="path"/>
					<init target="EUnit" ver="5" ref="units"/>
					<init target="Description" ver="5" ref="description"/>
				</object>
			</do-on>
		</object>
		<object access-modifier="private" name="OnComplete" display-name="OnComplete" uuid="4e6c40e3-5e9b-4901-992d-37bced0e0124" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
			<designed target="Enabled" value="true" ver="5"/>
			<designed target="InvokeTrigger" value="false" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
				<body kind="javascript">
					<![CDATA[var model = View.TableModel;
var selectedRows = JSON.parse(View.GetSelectedRows());
for (let rowIndex of selectedRows)
{
	var row = View.MapRowToModel(rowIndex);
	if (!View.IsEmptyDataRow(row))
	{
		var dataType = model.GetCellData(row, 0);
		var path = model.GetCellData(row, 1);
		var itemIndex = model.GetCellData(row, 9);
		
		var errorText = private.Converter.ValidateValue(DialogResult.Value, dataType);
		if (errorText != "") 
		{
			pLog.AddMessage(1, "Недопустимое значение сигнала: " + path + " - " + errorText);
		}
		else
		{
			var newValue = SetValue(dataType, DialogResult.Value, itemIndex);
			if (newValue != "")
				pLog.AddMessage(2, "Значение сигнала " + path + " изменено пользователем на " + newValue);
			else pLog.AddMessage(0, "Ошибка при изменении сигнала " + path + " пользователем");
		}
	}
}]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="DialogResult" display-name="DialogResult" uuid="3d695b14-0a70-44c1-88b7-a2431dd27622" base-type="Explorer_InputDialogResult" base-type-id="cdcda119-652b-45ed-bfc4-8cc21b98730d" ver="5">
			<do-trace access-modifier="private" target="Error" ver="5">
				<body>
					<![CDATA[private.Converter.ValidateValue(InputText, dataType)]]>
				</body>
			</do-trace>
		</object>
		<object access-modifier="private" name="path" display-name="path" uuid="29a7a14d-43b2-4ec4-acd4-9e5964ceabb7" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<object access-modifier="private" name="dataType" display-name="dataType" uuid="da241a04-6870-45ea-b175-81cfe7301a7f" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<object access-modifier="private" name="description" display-name="description" uuid="10661c1d-b91b-4cbf-9787-2ba463fce185" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<do access-modifier="private" name="SetValue" display-name="SetValue" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="om">
				<![CDATA[value: variant = private.Converter.StringToVariant(newValue, dataType);
if (Item[indexApItem].TrySetValue(value))
	return private.Converter.VariantToLocalizedString(value, dataType);
else return "";]]>
			</body>
			<param access-modifier="private" name="dataType" display-name="" uuid="373bee1a-9f4c-4a7b-bb41-2bbbd0ddea9f" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			<param access-modifier="private" name="newValue" display-name="" uuid="4b48df5f-4a3c-496e-a483-0b6b20dc97ee" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			<param access-modifier="private" name="indexApItem" display-name="" uuid="d9ca0435-0146-4620-9d6a-dc0848b9a0d5" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		</do>
		<object access-modifier="private" name="units" display-name="units" uuid="959d63d4-62c0-47ec-9cba-6410e3ce9e0e" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<do access-modifier="private" name="PrepareFields" display-name="PrepareFields" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// заполняем поля данымми первого выделенного сигнала
path = Variant.ToString(View.TableModel.GetCellData(firstItemRow, 1), "");
dataType = Variant.ToString(View.TableModel.GetCellData(firstItemRow, 0), "");
DialogResult.InputText = private.Converter.VariantToLocalizedString(View.TableModel.GetCellData(firstItemRow, 2), dataType);
description = (selectedItemCount > 1) ? (" и другие " + String.ToString(selectedItemCount - 1) + " шт") : Variant.ToString(View.TableModel.GetCellData(firstItemRow, 6), "");
units = Variant.ToString(View.TableModel.GetCellData(firstItemRow, 3), "");]]>
			</body>
			<param access-modifier="private" name="firstItemRow" display-name="" uuid="3be9f2de-f3fd-49f2-9e1c-33b358320a0e" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
			<param access-modifier="private" name="selectedItemCount" display-name="" uuid="f6a84c8e-8833-41d2-a2c9-f5589c8dbf83" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		</do>
	</object>
</type>

