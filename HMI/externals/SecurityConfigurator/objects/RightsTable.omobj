<type access-modifier="private" name="RightsTable" display-name="RightsTable" uuid="e141c390-8852-4e53-874f-a5fe9c888efa" base-type="Rectangle" base-type-id="15726dc3-881e-4d8d-b0fa-a8f8237f08ca" ver="5">
	<designed target="X" value="0" ver="5"/>
	<designed target="Y" value="0" ver="5"/>
	<designed target="ZValue" value="0" ver="5"/>
	<designed target="Rotation" value="0" ver="5"/>
	<designed target="Scale" value="1" ver="5"/>
	<designed target="Visible" value="true" ver="5"/>
	<designed target="Opacity" value="1" ver="5"/>
	<designed target="Enabled" value="true" ver="5"/>
	<designed target="Tooltip" value="" ver="5"/>
	<designed target="Width" value="610" ver="5"/>
	<designed target="Height" value="350" ver="5"/>
	<designed target="RoundingRadius" value="0" ver="5"/>
	<designed target="PenColor" value="0xff000000" ver="5"/>
	<designed target="PenStyle" value="0" ver="5"/>
	<designed target="PenWidth" value="1" ver="5"/>
	<designed target="BrushColor" value="4278190080" ver="5"/>
	<designed target="BrushStyle" value="0" ver="5"/>
	<object access-modifier="private" name="RightsView" display-name="RightsView" uuid="6464f57c-4632-4a44-b148-c2726f72ee75" base-type="Table" base-type-id="c65ff4dc-f22b-47d3-9333-72c4e4e5f662" ver="5">
		<designed target="X" value="0" ver="5"/>
		<designed target="Y" value="0" ver="5"/>
		<designed target="Rotation" value="0" ver="5"/>
		<designed target="Scale" value="1" ver="5"/>
		<designed target="Visible" value="true" ver="5"/>
		<designed target="Enabled" value="true" ver="5"/>
		<designed target="Width" value="600" ver="5"/>
		<designed target="Height" value="400" ver="5"/>
		<designed target="SelectionBehavior" value="1" ver="5"/>
		<designed target="SelectionMode" value="3" ver="5"/>
		<object access-modifier="private" name="Column" display-name="Column" uuid="6d0fa18e-39e0-4914-a531-d7fd231a792c" base-type="TableColumn" base-type-id="109c05c5-8dcf-4a8f-aedd-5bb547cca2d4" ver="5" cardinal="6">
			<designed target="Title" value="" ver="5"/>
			<designed target="Description" value="" ver="5"/>
			<designed target="Id" value="" ver="5"/>
			<designed target="BackgroundColor" value="0xfff0f0f0" ver="5"/>
			<designed target="ForegroundColor" value="0xff000000" ver="5"/>
			<designed target="Font" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="5"/>
			<designed target="TitleBackgroundColor" value="0xfff0f0f0" ver="5"/>
			<designed target="TitleForegroundColor" value="0xff000000" ver="5"/>
			<designed target="TitleFont" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="5"/>
			<designed target="Width" value="20" ver="5"/>
			<designed target="WidthResizeMode" value="0" ver="5"/>
			<designed target="Emptiable" value="true" ver="5"/>
			<designed target="Hidden" value="false" ver="5"/>
			<designed target="NumberFormat" value="%d" ver="5"/>
			<designed target="TimeFormat" value="dd.MM.yyyy hh:mm:ss.zzz" ver="5"/>
			<designed target="TextAlignment" value="129" ver="5"/>
			<designed target="JsonFilter" value="" ver="5"/>
			<designed target="SortingEnabled" value="false" ver="5"/>
			<designed target="SortOrder" value="0" ver="5"/>
			<designed target="SortPriority" value="0" ver="5"/>
			<designed target="WordWrap" value="true" ver="5"/>
			<designed target="TitleTextAlignment" value="132" ver="5"/>
			<designed target="SortMode" value="0" ver="5"/>
			<designed target="ColumnOwnId" value="" ver="5"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="MouseDoubleClick">
				<body kind="om">
					<![CDATA[if (Column[Index].Id == "RightsValue" && EditingAllowed){
	rightType: string = Variant.ToString(TableModel.GetCellData(row, 0),"");
	rightName: string = Variant.ToString(TableModel.GetCellData(row, 1),"");
	rightValueAllow: string = Variant.ToString(TableModel.GetCellData(row, 2),"null");	
	rightValueDenny: string = Variant.ToString(TableModel.GetCellData(row, 3),"null");	
	rightEffValue: string = Variant.ToString(TableModel.GetCellData(row, 7),"");
	appID: string = Variant.ToString(TableModel.GetCellData(row,9),"");
	OutputData.ResetParamsValues();
	
	if (rightValueAllow != "null"){
		if (rightType == "bool"){
			if (rightValueAllow == "TRUE" && rightValueDenny == "FALSE"){
				OutputData.SetParamsValue(appID, rightName, "FALSE", "TRUE");			//переход из ДА в НЕТ
				RightValueChanged.Invoke();
			} else if (rightValueAllow == "FALSE" && rightValueDenny == "TRUE" || rightValueAllow == "FALSE" && rightValueDenny == "FALSE") {
				OutputData.SetParamsValue(appID, rightName, "TRUE", "FALSE");		//переход из НЕТ (или Не определено) в ДА
				RightValueChanged.Invoke();
			}
		} else if (rightType == "string") {
			tokenCode: uint1 = TokensDefinition.GetTokenCode(appID,rightType,rightName);
			OutputData.SetParamsValue(appID, rightName, rightValueAllow, rightValueDenny);
			if (tokenCode == 5) {																					// 5 -  PasswordComplexity
				Action_PassComlexity.Invoke();
			} else if (tokenCode == 6){																			// 6 -  PasswordAge
				Action_PassAge.Invoke();
			} else if (TokensDefinition.IsSystemIntegerRight(tokenCode)) {		//"числовые" права .Security
				Action_ChangeIntegerRight.Invoke();
			} else {																										// остальные строковые права
				Action_ChangeStringRights.Invoke();
			}
		}
	}
}]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="WidthChanged">
				<body kind="om">
					<![CDATA[pViewSettingsChanged.Invoke();]]>
				</body>
			</do-on>
			<do-trace access-modifier="private" target="BackgroundColor" ver="5">
				<body>
					<![CDATA[pTheme.EditorBrushColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="ForegroundColor" ver="5">
				<body>
					<![CDATA[pTheme.EditorFontColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="Font" ver="5">
				<body>
					<![CDATA[pTheme.Font]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="TitleBackgroundColor" ver="5">
				<body>
					<![CDATA[pTheme.BackgroundColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="TitleForegroundColor" ver="5">
				<body>
					<![CDATA[pTheme.ForegroundColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="TitleFont" ver="5">
				<body>
					<![CDATA[pTheme.TitleFont]]>
				</body>
			</do-trace>
		</object>
		<designed target="LatestRowTracking" value="false" ver="5"/>
		<designed target="HeaderHeight" value="25" ver="5"/>
		<designed target="HeaderVisible" value="true" ver="5"/>
		<designed target="RowHeight" value="25" ver="5"/>
		<designed target="RowOrder" value="0" ver="5"/>
		<object access-modifier="private" name="selectedRow" display-name="selectedRow" uuid="7f26e9ca-53ec-426e-9386-124baa6a92c4" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
		<init target="TableModel" ver="5" ref="Model"/>
		<designed target="SelectionOverlayEnabled" value="false" ver="5"/>
		<object access-modifier="private" name="Decorator" display-name="Decorator" uuid="361efbcf-820e-48b8-9f18-58a157102859" base-type="TableDecorator" base-type-id="2ff6a2d7-9573-4060-bfea-29c63d61b079" ver="5">
			<designed target="JsonDecorator" value="" ver="5"/>
		</object>
		<designed target="HorizontalScrollMode" value="0" ver="5"/>
		<designed target="VerticalScrollMode" value="0" ver="5"/>
		<designed target="HorizontalScrollBarPolicy" value="0" ver="5"/>
		<designed target="VerticalScrollBarPolicy" value="0" ver="5"/>
		<designed target="DelayedSortingEnabled" value="false" ver="5"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="CurrentChanged">
			<body kind="om">
				<![CDATA[if (row>0 && row<GetRowCount()){
	selectedRow = row;
}]]>
			</body>
		</do-on>
		<object access-modifier="private" name="Model" display-name="Model" uuid="a5d50ca9-d409-42dd-ac9c-a332ed86f530" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="5">
			<designed target="Frozen" value="false" ver="5"/>
			<designed target="MaxRowCount" value="100000" ver="5"/>
		</object>
		<do access-modifier="private" name="Init" display-name="Init" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[if (Model.GetColumnCount() == 0){

	Column[0].Title = "Тип";
	Column[0].Id = "TokenTypeTitle";
	Column[0].Hidden = false;
	Column[0].Width = 75;
	Column[0].WordWrap = true;
	
	Column[1].Title = "Право";
	Column[1].Id = "NameRight";
	Column[1].Hidden = false;
	Column[1].Width = 100;
	Column[1].WordWrap = false;
	
	Column[2].Title = "Значение";
	Column[2].Id = "RightsValue";
	Column[2].Hidden = false;
	Column[2].Width = 100;
	Column[2].WordWrap = true;
	
	Column[3].Title = "Эффективное значение";
	Column[3].Id = "EffRightValue";
	Column[3].Hidden = false;
	Column[3].Width = 130;
	Column[3].WordWrap = true;
	
	Column[4].Title = "";
	Column[4].Id = "AppID";
	Column[4].Hidden = true;
	Column[4].Width = 20;
	Column[4].WordWrap = false;
	
	Column[5].Title = " Описание";
	Column[5].Id = "Description";
	Column[5].Hidden = false;
	Column[5].Width = 200;
	Column[5].WordWrap = false;
	
	Model.Reset();
	Model.AddColumn("TypeRight","","","","string",false,true);						//0
	Model.AddColumn("NameRight","","","","string",false,true);						//1
	Model.AddColumn("RightsAllowValue","","","","string",false,true);			//2
	Model.AddColumn("RightsDenyValue","","","","string",false,true);				//3
	Model.AddColumn("RightsValue","","","","string",false,true);					//4	- вычисленное значение права ( только для отображения)
	Model.AddColumn("EffRightsAllowValue","","","","string",false,true);		//5
	Model.AddColumn("EffRightsDenyValue","","","","string",false,true);			//6
	Model.AddColumn("EffRightValue","","","","string",false,true);					//7	- вычисленное значение эффективного права ( только для отображения)
	Model.AddColumn("Description","","","","string",false,true);					//8
	Model.AddColumn("AppID","","","","string",false,true);								//9
	Model.AddColumn("TokenTypeTitle","","","","string",false,true);				//10	- текст типа токена ( только для отображения)
	Model.Clear();
	
	Decorator.JsonDecorator = GetJsonDecorator();
}

]]>
			</body>
		</do>
		<do access-modifier="private" name="GetJsonDecorator" display-name="GetJsonDecorator" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[var Object = {};
Object.Formatting = [];
Object.Decorating = [];
Object.StyleDictionary = [];

var tokenType_format = {};
tokenType_format[`formatting_rule_name`] = "tokenType_format";
tokenType_format[`formatting_column`] = "TokenTypeTitle";
tokenType_format[`conditions`] = [];
tokenType_format[`conditions`].push({'condition':{'data:TokenTypeTitle': 'bool'},'text':'логическое'});
tokenType_format[`conditions`].push({'condition':{'data:TokenTypeTitle': 'string'},'text':'строковое'});
tokenType_format[`conditions`].push({'condition':{'data:TokenTypeTitle': 'boolArray'},'text':'битовая \nмаска'});
tokenType_format[`conditions`].push({'condition':{'data:TokenTypeTitle': 'int32Array'},'text':'диапазон \nчисел'});
tokenType_format[`conditions`].push({'condition':{'data:TokenTypeTitle': 'int32'},'text':'числовое'});

Object.Formatting.push(tokenType_format);

var rightValue_format = {};
rightValue_format[`formatting_rule_name`] = "rightValue_format";
rightValue_format[`formatting_column`] = "RightsValue";
rightValue_format[`conditions`] = [];
rightValue_format[`conditions`].push({'condition':{'and':[{'data:TokenTypeTitle': 'bool'},{'data:RightsValue': 'TRUE'}]},'text':'Да'});
rightValue_format[`conditions`].push({'condition':{'and':[{'data:TokenTypeTitle': 'bool'},{'data:RightsValue': 'FALSE'}]},'text':'Нет'});
Object.Formatting.push(rightValue_format);

var effectiveRightValue_format = {};
effectiveRightValue_format[`formatting_rule_name`] = "effectiveRightValue_format";
effectiveRightValue_format[`formatting_column`] = "EffRightValue";
effectiveRightValue_format[`conditions`] = [];
effectiveRightValue_format[`conditions`].push({'condition':{'and':[{'data:TokenTypeTitle': 'bool'},{'data:EffRightValue': 'TRUE'}]},'text':'Да'});
effectiveRightValue_format[`conditions`].push({'condition':{'and':[{'data:TokenTypeTitle': 'bool'},{'data:EffRightValue': 'FALSE'}]},'text':'Нет'});
Object.Formatting.push(effectiveRightValue_format);

var stringDecorating = {};
stringDecorating[`decoration_rule_name`] = "string_decorating";
stringDecorating[`decoration_rule`] = {'data:TokenTypeTitle': 'string'};
stringDecorating[`columnstyle`] = {'TokenTypeTitle':"stringStyle"};
Object.Decorating.push(stringDecorating);

var boolDecorating = {};
boolDecorating[`decoration_rule_name`] = "bool_decorating";
boolDecorating[`decoration_rule`] = {'data:TokenTypeTitle': 'bool'};
boolDecorating[`columnstyle`] = {'TokenTypeTitle':"boolStyle"};
Object.Decorating.push(boolDecorating);

var boolArrayDecorating = {};
boolArrayDecorating[`decoration_rule_name`] = "boolArray_decorating";
boolArrayDecorating[`decoration_rule`] = {'data:TokenTypeTitle': 'boolArray'};
boolArrayDecorating[`columnstyle`] = {'TokenTypeTitle':"boolArrayStyle"};
Object.Decorating.push(boolArrayDecorating);

var Int32ArrayDecorating = {};
Int32ArrayDecorating[`decoration_rule_name`] = "Int32Array_decorating";
Int32ArrayDecorating[`decoration_rule`] = {'data:TokenTypeTitle': 'Int32Array'};
Int32ArrayDecorating[`columnstyle`] = {'TokenTypeTitle':"Int32ArrayStyle"};
Object.Decorating.push(Int32ArrayDecorating);

var Int32Decorating = {};
Int32Decorating[`decoration_rule_name`] = "Int32_decorating";
Int32Decorating[`decoration_rule`] = {'data:TokenTypeTitle': 'Int32'};
Int32Decorating[`columnstyle`] = {'TokenTypeTitle':"Int32Style"};
Object.Decorating.push(Int32Decorating);

var valueTrueDecorating = {};
valueTrueDecorating[`decoration_rule_name`] = "valueTrueDecorating";
valueTrueDecorating[`decoration_rule`] = {'and':[{'data:TokenTypeTitle': 'bool'},{'data:RightsValue': 'TRUE'}]};
valueTrueDecorating[`columnstyle`] = {'RightsValue':"trueStyle"};
Object.Decorating.push(valueTrueDecorating);

var valueFalseDecorating = {};
valueFalseDecorating[`decoration_rule_name`] = "valueFalseDecorating";
valueFalseDecorating[`decoration_rule`] = {'and':[{'data:TokenTypeTitle': 'bool'},{'data:RightsValue': 'FALSE'}]};
valueFalseDecorating[`columnstyle`] = {'RightsValue':"falseStyle"};
Object.Decorating.push(valueFalseDecorating);

var effectiveValueTrueDecorating = {};
effectiveValueTrueDecorating[`decoration_rule_name`] = "effectiveValueTrueDecorating";
effectiveValueTrueDecorating[`decoration_rule`] = {'and':[{'data:TokenTypeTitle': 'bool'},{'data:EffRightValue': 'TRUE'}]};
effectiveValueTrueDecorating[`columnstyle`] = {'EffRightValue':"trueStyle"};
Object.Decorating.push(effectiveValueTrueDecorating);

var effectiveValueFalseDecorating = {};
effectiveValueFalseDecorating[`decoration_rule_name`] = "effectiveValueFalseDecorating";
effectiveValueFalseDecorating[`decoration_rule`] = {'and':[{'data:TokenTypeTitle': 'bool'},{'data:EffRightValue': 'FALSE'}]};
effectiveValueFalseDecorating[`columnstyle`] = {'EffRightValue':"falseStyle"};
Object.Decorating.push(effectiveValueFalseDecorating);

var boolStyle = {};
boolStyle[`style_name`] = "boolStyle";
boolStyle[`style`] = {'background_color':'#ffddddff'};
Object.StyleDictionary.push(boolStyle);

var stringStyle = {};
stringStyle[`style_name`] = "stringStyle";
stringStyle[`style`] = {'background_color':'#fff3d3b4'};
Object.StyleDictionary.push(stringStyle);

var boolArrayStyle = {};
boolArrayStyle[`style_name`] = "boolArrayStyle";
boolArrayStyle[`style`] = {'background_color':'#ffddddff'};
Object.StyleDictionary.push(boolArrayStyle);

var Int32ArrayStyle = {};
Int32ArrayStyle[`style_name`] = "Int32ArrayStyle";
Int32ArrayStyle[`style`] = {'background_color':'#ff97d2fd'};
Object.StyleDictionary.push(Int32ArrayStyle);

var Int32Style = {};
Int32Style[`style_name`] = "Int32Style";
Int32Style[`style`] = {'background_color':'#ff97d2fd'};	//ff7ab4f4, #ff78c6ff - более темный синий
Object.StyleDictionary.push(Int32Style);

var trueStyle = {};
trueStyle[`style_name`] = "trueStyle";
trueStyle[`style`] = {'background_color':'#fface3ac'};
Object.StyleDictionary.push(trueStyle);

var falseStyle = {};
falseStyle[`style_name`] = "falseStyle";
falseStyle[`style`] = {'background_color':'#ffffa39b'};
Object.StyleDictionary.push(falseStyle);

var appDecorating = {};
appDecorating[`decoration_rule_name`] = "appDecorating";
appDecorating[`decoration_rule`] = {'data:TokenTypeTitle': ' '};
appDecorating[`rowstyle`] = "appStyle";
Object.Decorating.push(appDecorating);

var appStyle = {};
appStyle[`style_name`] = "appStyle";
appStyle[`style`] = {'background_color':'#ffdcf2f8','font':{'font_weight':'bold'}};
Object.StyleDictionary.push(appStyle);

return JSON.stringify(Object, null, 2);]]>
			</body>
		</do>
		<designed target="BackgroundColor" value="0xffffffff" ver="5"/>
		<designed target="FrameColor" value="0xff000000" ver="5"/>
		<designed target="GridColor" value="0xffd8d8d8" ver="5"/>
		<do-trace access-modifier="private" target="BackgroundColor" ver="5">
			<body>
				<![CDATA[pTheme.EditorBrushColor]]>
			</body>
		</do-trace>
		<do-trace access-modifier="private" target="FrameColor" ver="5">
			<body>
				<![CDATA[pTheme.BorderColor]]>
			</body>
		</do-trace>
		<do-trace access-modifier="private" target="GridColor" ver="5">
			<body>
				<![CDATA[pTheme.DisabledBorderColor]]>
			</body>
		</do-trace>
	</object>
	<object access-modifier="private" name="Debug" display-name="Debug" uuid="b4a509c1-8f1a-41c9-9eb4-4b0b092f0281" base-type="DebugTool" base-type-id="43946044-139a-43f4-a7b8-19a6074ffc56" ver="5"/>
	<do access-modifier="private" name="SetToTable" display-name="SetToTable" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="javascript">
			<![CDATA[//при изменении списка прав - перестраиваем модель таблицы

//Ссылки
const rightsModel = RightsView.TableModel;
const getTypeTitle = TokensDefinition.GetTypeTitle;
const determineRightsValue = TokensDefinition.DetermineRightsValue;

RightsView.Init();
rightsModel.Clear();

var rightsData, effectiveRightsData;
try {
	rightsData = JSON.parse(RightsJson).data;
} catch (error) {
	rightsData = [];
}

try { 
	effectiveRightsData = JSON.parse(EffectiveRightsJson).data;
} catch (error) {
	effectiveRightsData = [];
}

//sortByTokenName
effectiveRightsData = effectiveRightsData.sort((a, b) => a.tokenName.toString().toLowerCase() > b.tokenName.toString().toLowerCase() ? 1 : -1);

effectiveRightsData = getRightsEntity(effectiveRightsData);
rightsData = getRightsEntity(rightsData);

//Вывод в таблицу
var currentRow, type, effValue, typeTitle;
var value, rightAllowValue, rightDenyValue;
var ownRightData;
for (let [appId, tokens] of Object.entries(effectiveRightsData)) {
	currentRow = rightsModel.GetRowCount();
	rightsModel.AddRow();
	rightsModel.SetCellData(currentRow,0, " ");	
	rightsModel.SetCellData(currentRow,10, " "); //отметка строки приложения для декоратора 
	rightsModel.SetCellData(currentRow,1, appId);
	
	for (let [tokenName, tokenData] of Object.entries(tokens)){
		type = tokenData.type;
		typeTitle = getTypeTitle(appId, type, tokenName);
		effValue = determineRightsValue(appId, type, tokenName, tokenData.allowValue, tokenData.denyValue);
		
		//Подготовка значений если rightsData содержит права
		if (rightsData.hasOwnProperty(appId) && rightsData[appId].hasOwnProperty(tokenName)) {
			ownRightData = rightsData[appId][tokenName];
			rightAllowValue = ownRightData.allowValue;
			rightDenyValue = ownRightData.denyValue;
			value = determineRightsValue(appId, type, tokenName, ownRightData.allowValue, ownRightData.denyValue);	
		} else {
			rightAllowValue = null;
			rightDenyValue = null;
			value = null;
		}		
		
		currentRow = rightsModel.GetRowCount();
		rightsModel.AddRow();
		rightsModel.SetCellData(currentRow, 0, type);
		rightsModel.SetCellData(currentRow, 1, tokenName);
		rightsModel.SetCellData(currentRow, 2, rightAllowValue);
		rightsModel.SetCellData(currentRow, 3, rightDenyValue);
		rightsModel.SetCellData(currentRow, 4, value);
		rightsModel.SetCellData(currentRow, 5, tokenData.allowValue);
		rightsModel.SetCellData(currentRow, 6, tokenData.denyValue);
		rightsModel.SetCellData(currentRow, 7, effValue);
		rightsModel.SetCellData(currentRow, 8, tokenData.description);
		rightsModel.SetCellData(currentRow, 9, appId);
		rightsModel.SetCellData(currentRow, 10, typeTitle);
	}
}

//переход к выделенной ячейке
if (RightsView.selectedRow >= 0 && RightsView.selectedRow <= RightsView.GetRowCount())
	RightsView.ScrollTo(RightsView.selectedRow,2,3);
else
	RightsView.ScrollToTop();


//-----------------------------------------------
function getRightsEntity(rightArrayData) {
  	let rightsEntity = {};
	let app, token;
	//Создание полей с именем приложений
	for (let appName of  getAppNames(rightArrayData, "appName")){
		rightsEntity[appName] = {};
	}
	
	//Формирование объектов
	for (let right of rightArrayData) {
      app = right.appName;
      token = right.tokenName;
      if (rightsEntity.hasOwnProperty(app)){
      	rightsEntity[app][token] = {
				"type":right.tokenType,
				"description":right.tokenDescription,
				"allowValue":right.tokenValueAllow,
				"denyValue":right.tokenValueDeny
         };
      }
	}
	return rightsEntity;
	
	//Получение списка уникальных имен приложений
	function getAppNames(inputArray, fieldName) {
		let names = [];
		for (let element of inputArray) {
			if ((names.indexOf(element[fieldName]) === -1) )	names.push(element[fieldName]);	
		}
		return names.sort((a, b) => a.toString().toLowerCase() > b.toString().toLowerCase() ? 1 : -1);
	}
}]]>
		</body>
		<param access-modifier="private" name="RightsJson" display-name="" uuid="9bdcaf20-29b5-44ed-9ac1-6f6423ea2364" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<param access-modifier="private" name="EffectiveRightsJson" display-name="" uuid="e8a98312-dcd0-4058-b740-ed62f8f0f139" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
	</do>
	<object access-modifier="private" name="LinearLayout" display-name="LinearLayout" uuid="085697e6-ce6e-4222-b9da-c6650eaf0b3e" base-type="LinearLayout" base-type-id="800edd71-7303-408c-890b-8346e98f5718" ver="5">
		<designed target="Orientation" value="1" ver="5"/>
		<designed target="Gap" value="0" ver="5"/>
	</object>
	<object access-modifier="private" name="pTheme" display-name="pTheme" uuid="952692a9-33bb-4d03-8e8b-004d2a8ac84b" base-type="Theme" base-type-id="05d4d7df-0f8e-4ec1-ac85-b5460e30af81" base-const="true" base-ref="true" ver="5" description=""/>
	<object access-modifier="private" name="Action_ChangeStringRights" display-name="Action_ChangeStringRights" uuid="99591231-3d20-4041-a64d-5c207cfa7b2c" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="Action_PassComlexity" display-name="Action_PassComlexity" uuid="d3f437bf-f2d2-4f6e-bd8a-1866cba88234" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="RightValueChanged" display-name="RightValueChanged" uuid="deb0424e-f54a-4354-b6fb-8adb7f2c56a5" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="Action_PassAge" display-name="Action_PassAge" uuid="1023e9d9-1828-40e2-a16f-0fc92efc6dce" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="Action_ChangeIntegerRight" display-name="Action_ChangeIntegerRight" uuid="644e96b5-3906-4b53-9ada-768e838b48eb" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="pViewSettingsChanged" display-name="pViewSettingsChanged" uuid="ed6300ed-5223-4d25-9d91-11198548d42b" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="5" description=""/>
	<object access-modifier="private" name="OutputData" display-name="OutputData" uuid="27e3d6a3-8666-46fe-9c3a-b8cafee707d4" base-type="ChangedRightsResult" base-type-id="3efb0823-a348-4b39-a762-64290867ccb6" base-const="true" base-ref="true" ver="5"/>
	<object access-modifier="private" name="TokensDefinition" display-name="TokensDefinition" uuid="3631574a-8abb-4600-a668-6c2d1a27e743" base-type="TokensDefinition" base-type-id="2d057de8-3722-4426-b142-42fa7ada0520" ver="5"/>
	<object access-modifier="private" name="EditingAllowed" display-name="EditingAllowed" uuid="6978d00c-f73f-4319-a219-d6df16d3eb18" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5"/>
	<do access-modifier="private" name="GetViewSettings" display-name="GetViewSettings" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="javascript">
			<![CDATA[var settings = 
	{
		"Columns" : {}
	};

for (var i = 0; i < RightsView.Column.Length; i++)
{		
	var column = RightsView.Column[i];
	var columnInfo = {
		"Index": column.Index,
		"Width": column.Width,
		"Hidden": column.Hidden
	};
	if (column.SortingEnabled != false)
	{
		columnInfo.SortOrder = column.SortOrder;
		columnInfo.SortPriority = column.SortPriority;
	}
	settings.Columns[column.Id] = columnInfo;
}

return JSON.stringify(settings);]]>
		</body>
	</do>
	<do access-modifier="private" name="UpdateView" display-name="UpdateView" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<param access-modifier="private" name="settings" display-name="" uuid="77158c7a-4051-44be-8c25-9900b46d9ef9" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
		<body kind="javascript">
			<![CDATA[var rightsTable = JSON.parse(settings);
if (rightsTable.Columns != undefined)
{
	RightsView.Init();
	for (var i = 0; i < RightsView.Column.Length; i++)
	{
		var column = RightsView.Column[i];
		var columnInfo = rightsTable.Columns[column.Id];
		if (columnInfo != undefined)
		{
			column.Width = columnInfo.Width;
			column.Hidden = columnInfo.Hidden;
			column.SortingEnabled = columnInfo.SortOrder != undefined;
			if (column.SortingEnabled)
			{
				column.SortOrder = columnInfo.SortOrder;
				column.SortPriority = columnInfo.SortPriority;
			}
		}
	}
}]]>
		</body>
	</do>
	<designed target="Flip" value="0" ver="5"/>
	<do access-modifier="private" name="Init" display-name="Init" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[RightsView.Init();]]>
		</body>
	</do>
</type>

